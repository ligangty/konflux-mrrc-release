---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: konflux-mrrc-release-pipeline
  labels:
    app.kubernetes.io/version: "4.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Single test pipeline for test release
  params:
    - name: release
    - name: releasePlan
    - name: releasePlanAdmission
    - name: releaseServiceConfig
    - name: snapshot
    # - name: postCleanUp
    #   type: string
    #   description: Cleans up workspace after finishing executing the pipeline
    #   default: "true"
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default: https://github.com/ligangty/konflux-mrrc-release.git
    - name: taskGitRevision
      type: string
      default: main
    - name: konfluxTaskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default: https://github.com/konflux-ci/release-service-catalog.git
    - name: konfluxTaskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
      default: production
  workspaces:
    - name: data
  resources:
    - name: release
      type: "tekton.dev/v1beta1/PipelineRun"
      params:
        - name: pipelineRef
          value: "release-pipeline"
        - name: serviceAccount
          value: "release-service-catalog"
        - name: namespace
  workspaces:
    - name: release-workspace
  tasks:
    - name: collect-data
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.konfluxTaskGitUrl)
          - name: revision
            value: $(params.konfluxTaskGitRevision)
          - name: pathInRepo
            value: tasks/collect-data/collect-data.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: releasePlanAdmission
          value: $(params.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(params.releaseServiceConfig)
        - name: snapshot
          value: $(params.snapshot)
      workspaces:
        - name: data
          workspace: release-workspace
    - name: repo-signature-verify
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release/tasks/repo-sign-verify.yaml
      params:
        - name: dataJsonPath
          value: "$(workspaces.data.path)/$(tasks.collect-data.results.data)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - collect-data
    - name: repo-download
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release/tasks/repo-download.yaml
      params:
        - name: dataJsonPath
          value: "$(workspaces.data.path)/$(tasks.collect-data.results.data)"
        - name: repoStorePath
          value: "$(workspaces.data.path)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - repo-signature-verify
    - name: charon
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release/tasks/charon.yaml
      params:
        - name: dataJsonPath
          value: "$(workspaces.data.path)/$(tasks.collect-data.results.data)"
        - name: mavenRepoPath
          value: "$(tasks.repo-download.results.repoPath)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - repo-download
  # finally:
  #   - name: cleanup
  #     taskRef:
  #       resolver: "git"
  #       params:
  #         - name: url
  #           value: $(params.taskGitUrl)
  #         - name: revision
  #           value: $(params.taskGitRevision)
  #         - name: pathInRepo
  #           value: release/tasks/cleanup-workspace.yaml
  #     when:
  #       - input: $(params.postCleanUp)
  #         operator: in
  #         values: ["true"]
  #     params:
  #       - name: subdirectory
  #         value: "$(context.pipelineRun.uid)"
  #       - name: pipelineRunUid
  #         value: $(context.pipelineRun.uid)
  #     workspaces:
  #       - name: data
  #         workspace: release-workspace