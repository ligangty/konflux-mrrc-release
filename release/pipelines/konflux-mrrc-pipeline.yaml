---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: konflux-mrrc-release-pipeline
  labels:
    app.kubernetes.io/version: "4.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Single test pipeline for test release
  params:
    - name: postCleanUp
      type: string
      description: Cleans up workspace after finishing executing the pipeline
      default: "true"
    - name: verify_ec_task_bundle
      type: string
      description: The location of the bundle containing the verify-enterprise-contract task
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default: https://github.com/ligangty/konflux-mrrc-release.git
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
      default: main
    - name: productName
      type: string
      description: The name of the product
      default: test-product
    - name: productVersion
      type: string
      description: The version of the product
      default: 1.0.0
  workspaces:
    - name: data
  resources:
    - name: release
      type: "tekton.dev/v1beta1/PipelineRun"
      params:
        - name: pipelineRef
          value: "release-pipeline"
        - name: serviceAccount
          value: "release-service-catalog"
        - name: namespace
  workspaces:
    - name: release-workspace
  tasks:
    - name: charon-help
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release/tasks/charon-help.yaml
          - name: productName
            value: $(params.productName)
          - name: productVersion
            value: $(params.productVersion)
      workspaces:
        - name: data
          workspace: release-workspace
  finally:
    - name: cleanup
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release/tasks/cleanup-workspace.yaml
      when:
        - input: $(params.postCleanUp)
          operator: in
          values: ["true"]
      params:
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: release-workspace