---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: publish-to-mrrc
  labels:
    app.kubernetes.io/version: "0.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  params:
    - name: mrrcParamFilePath
      description: path of the env file for mrrc parameters to use
      type: string
    - name: cosignPubKeyConfig
      description: the configmap name for cosign verify public key
      type: string
    - name: charonAWSSecret
      description: the secret name for charon aws credential file
      type: string
  steps:
    - name: verify-repo-signature
      image: registry.redhat.io/rhtas/cosign-rhel9@sha256:75791f7ee9257e837d1e3db13415d858c397e803ffa4534c51ca19a2ba34b2ab
      script: |
        set -eux
        MRRC_FILE="$(workspaces.data.path)/$(params.mrrcParamFilePath)"
        . "$MRRC_FILE"
        echo "Verify the maven repo zip $MRRC_ZIP_REGISTRY"
        cosign verify --key /home/konflux/.cosign/cosign.pub $MRRC_ZIP_REGISTRY
      volumeMounts:
        - name: "pub-key-vol"
          mountPath: "/home/konflux/.cosign/"
    - name: download-maven-repo
      image: quay.io/konflux-ci/oras:477ee20f7e6d146ea203c4aaa0507f4d1e925a53
      script: |
        set -eux
        WORK_DIR="$(workspaces.data.path)"
        MRRC_FILE="$WORK_DIR/$(params.mrrcParamFilePath)"
        . "$MRRC_FILE"
        echo "Downloading the maven repo zip $MRRC_ZIP_REGISTRY"
        mrrc_dir="$(dirname $MRRC_FILE)/mrrc"
        mkdir $mrrc_dir
        cd $mrrc_dir
        oras pull $MRRC_ZIP_REGISTRY
    - name: upload-maven-repo
      image: quay.io/redhat-services-prod/spmm-charon-containe-tenant/charon:e9312870607e2ba335231047af9ea81a03e52778
      script: |
        set -eux
        MRRC_FILE="$(workspaces.data.path)/$(params.mrrcParamFilePath)"
        . "$MRRC_FILE"
        target=$MRRC_TARGET
        productName=$MRRC_PRODUCT_NAME
        productVersion=$MRRC_PRODUCT_VERSION
        work_dir="$(dirname $MRRC_FILE)/mrrc"
        mavenRepoPath="$(ls $work_dir/*.zip)"
        echo "Release $productName-$productVersion into $target"
        charon upload -p $productName -v $productVersion -t $target $mavenRepoPath
      volumeMounts:
        - name: "charon-configs-vol"
          mountPath: "/home/charon/.charon"
        - name: "charon-aws-vol"
          mountPath: "/home/charon/.aws"
  volumes:
    - name: "pub-key-vol"
      configMap:
        name: "$(params.cosignPubKeyConfig)"
    - name: "charon-configs-vol"
      configMap:
        name: "charon-configs"
    - name: "charon-aws-vol"
      secret:
        secretName: "$(params.charonAWSSecret)"
  workspaces:
    - name: data