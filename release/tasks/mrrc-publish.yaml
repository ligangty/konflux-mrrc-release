apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: mrrc-publish
spec:
  params:
    - name: dataJsonPath
      description: path to data json file
    # - name: mrrcEnvFilePath
    #   description: path to mrrc env file
    - name: cosignPubKeyVol
      description: the secret mount volume name for cosign verify pub key
      type: string
      default: "pub-key-vol"
    - name: cosignPubKeyFile
      description: the pub key file name for cosign verification
      type: string
      default: "cosign.pub"
    - name: cosignPubKeySecName
      description: the secret name for cosign verify pub key
      type: string
      default: "test-cosign-pub-key"
    # - name: mavenRepoPath
    #   description: path of the maven repo zip to upload
    - name: charonConfig
      description: the configmap name for charon configs
      type: string
      default: "charon-configs"
    - name: charonConfigVol
      description: the configmap mount volume name for charon configs
      type: string
      default: "charon-configs-vol"
    - name: charonAWSVol
      description: the secret mount volume name for charon aws credentials
      type: string
      default: "charon-aws-vol"
    - name: charonAWSCreds
      type: string
      default: "charon-aws-credentials"
  results:
    - name: envFilePath
      description: path of the env file for following tasks
    - name: repoPath
      description: path of the maven repo zip downloaded
  steps:
    - name: collect-env
      image: quay.io/konflux-ci/yq:latest
      script: |
        set -eux
        cd $(workspaces.data.path)
        mrrcEnvFile="./mrrc_env.sh"
        if [ -f $mrrcEnvFile ]; then
          rm $mrrcEnvFile
        fi

        zipRegistry=$(yq -r '.product.zipRegistry' $(params.dataJsonPath))
        echo "export MRRC_ZIP_REGISTRY=$zipRegistry" >> $mrrcEnvFile
        target=$(yq -r '.target' $(params.dataJsonPath))
        if [ "$target" == "" ] && [ "$target" == "null" ]; then
          target="dev-maven-ga"
        fi
        echo "export MRRC_TARGET=$target" >> $mrrcEnvFile
        productName=$(yq -r '.product.name' $(params.dataJsonPath))
        productVersion=$(yq -r '.product.version' $(params.dataJsonPath))
        echo "export MRRC_PRODUCT_NAME=$productName" >> $mrrcEnvFile
        echo "export MRRC_PRODUCT_VERSION=$productVersion" >> $mrrcEnvFile
        awsEnvs=$(yq -r '.awsEnvs' $(params.dataJsonPath)) 
        if [ "$awsEnvs" != "" ] && [ "$awsEnvs" != "null" ]; then 
          for i in $(echo $awsEnvs | yq -r "keys" | tr -d '"' | awk '{print $2}'); do
            aws_value=$(echo $awsEnvs | yq -r .$i)
            echo "export $i=$aws_value" >> $mrrcEnvFile
          done
        fi
        currentPath=$(pwd)
        echo -n "$currentPath/$mrrcEnvFile" > "$(results.envFilePath.path)"
      workingDir: $(workspaces.data.path)
    - name: verify-repo-signature
      image: registry.redhat.io/rhtas/cosign-rhel9:1.0.1 
      script: |
        set -eux
        cd $(workspaces.data.path)
        source ./mrrc_env.sh
        echo "Verify the maven repo zip $MRRC_ZIP_REGISTRY"
        cosign verify --key /home/konflux/.cosign/$(params.cosignPubKeyFile) $MRRC_ZIP_REGISTRY
      workingDir: $(workspaces.data.path)
      volumeMounts:
        - name: "$(params.cosignPubKeyVol)"
          mountPath: "/home/konflux/.cosign/"
    - name: download-maven-repo
      image: quay.io/konflux-ci/oras:latest
      script: |
        set -eux
        cd $(workspaces.data.path)
        source ./mrrc_env.sh
        echo "Downloading the maven repo zip $MRRC_ZIP_REGISTRY"
        mkdir maven-repo
        cd maven-repo
        oras pull $MRRC_ZIP_REGISTRY
        repoName=$(ls *.zip)
        currentPath=$(pwd)
        echo -n "$currentPath/$repoName" > "$(results.repoPath.path)"
      workingDir: $(workspaces.data.path)
    - name: upload-maven-repo
      image: quay.io/ligangty/charon:latest
      script: |
        set -eux
        cd $(workspaces.data.path)
        source ./mrrc_env.sh
        target=$MRRC_TARGET
        productName=$MRRC_PRODUCT_NAME
        productVersion=$MRRC_PRODUCT_VERSION
        mavenRepoPath=$(ls ./maven-repo/*.zip)
        echo "Release $productName-$productVersion into $target"
        charon upload -p $productName -v $productVersion -t $target $mavenRepoPath
      workingDir: $(workspaces.data.path)
      volumeMounts:
        - name: "$(params.charonConfigVol)"
          mountPath: "/home/charon/.charon"
        - name: "$(params.charonAWSVol)"
          mountPath: "/home/charon/.aws"
  volumes:
    - name: "$(params.cosignPubKeyVol)"
      secret:
        secretName: "$(params.cosignPubKeySecName)"
    - name: "$(params.charonConfigVol)"
      configMap:
        name: "$(params.charonConfig)"
    - name: "$(params.charonAWSVol)"
      secret:
        secretName: "$(params.charonAWSCreds)"
  workspaces:
    - name: data